/* tslint:disable */
/* eslint-disable */
/**
 * An example of generating swagger via gRPC ecosystem.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V1CheckResponse,
} from '../models/index';
import {
    V1CheckResponseFromJSON,
    V1CheckResponseToJSON,
} from '../models/index';

export interface HealthServiceCheckRequest {
    servingName: string;
}

/**
 * 
 */
export class HealthServiceApi extends runtime.BaseAPI {

    /**
     */
    async healthServiceCheckRaw(requestParameters: HealthServiceCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CheckResponse>> {
        if (requestParameters['servingName'] == null) {
            throw new runtime.RequiredError(
                'servingName',
                'Required parameter "servingName" was null or undefined when calling healthServiceCheck().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['servingName'] != null) {
            queryParameters['servingName'] = requestParameters['servingName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read", "write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/healthCheck`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CheckResponseFromJSON(jsonValue));
    }

    /**
     */
    async healthServiceCheck(requestParameters: HealthServiceCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CheckResponse> {
        const response = await this.healthServiceCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
