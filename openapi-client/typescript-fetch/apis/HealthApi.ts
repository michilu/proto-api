/* tslint:disable */
/* eslint-disable */
/**
 * An example of generating swagger via gRPC ecosystem.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  StreamResultOfV1HealthCheckResponse,
  V1HealthCheckResponse,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    StreamResultOfV1HealthCheckResponseFromJSON,
    StreamResultOfV1HealthCheckResponseToJSON,
    V1HealthCheckResponseFromJSON,
    V1HealthCheckResponseToJSON,
} from '../models/index';

export interface HealthCheckRequest {
    service?: string;
}

export interface HealthWatchRequest {
    service?: string;
}

/**
 * 
 */
export class HealthApi extends runtime.BaseAPI {

    /**
     */
    async healthCheckRaw(requestParameters: HealthCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1HealthCheckResponse>> {
        const queryParameters: any = {};

        if (requestParameters.service !== undefined) {
            queryParameters['service'] = requestParameters.service;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read", "write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = this.configuration.apiKey("X-API-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/healthCheck`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1HealthCheckResponseFromJSON(jsonValue));
    }

    /**
     */
    async healthCheck(requestParameters: HealthCheckRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1HealthCheckResponse> {
        const response = await this.healthCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async healthWatchRaw(requestParameters: HealthWatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamResultOfV1HealthCheckResponse>> {
        const queryParameters: any = {};

        if (requestParameters.service !== undefined) {
            queryParameters['service'] = requestParameters.service;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read", "write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = this.configuration.apiKey("X-API-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/healthWatch`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamResultOfV1HealthCheckResponseFromJSON(jsonValue));
    }

    /**
     */
    async healthWatch(requestParameters: HealthWatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamResultOfV1HealthCheckResponse> {
        const response = await this.healthWatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
