/* tslint:disable */
/* eslint-disable */
/**
 * An example of generating swagger via gRPC ecosystem.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: none@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RpcCode } from './RpcCode';
import {
    RpcCodeFromJSON,
    RpcCodeFromJSONTyped,
    RpcCodeToJSON,
} from './RpcCode';

/**
 * 
 * @export
 * @interface Protov1Response
 */
export interface Protov1Response {
    /**
     * 
     * @type {RpcCode}
     * @memberof Protov1Response
     */
    code?: RpcCode;
    /**
     * 
     * @type {Array<string>}
     * @memberof Protov1Response
     */
    details?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Protov1Response
     */
    message?: string;
}

/**
 * Check if a given object implements the Protov1Response interface.
 */
export function instanceOfProtov1Response(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function Protov1ResponseFromJSON(json: any): Protov1Response {
    return Protov1ResponseFromJSONTyped(json, false);
}

export function Protov1ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Protov1Response {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : RpcCodeFromJSON(json['code']),
        'details': !exists(json, 'details') ? undefined : json['details'],
        'message': !exists(json, 'message') ? undefined : json['message'],
    };
}

export function Protov1ResponseToJSON(value?: Protov1Response | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': RpcCodeToJSON(value.code),
        'details': value.details,
        'message': value.message,
    };
}

