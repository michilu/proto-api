# coding: utf-8

"""
    An example of generating swagger via gRPC ecosystem.

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Contact: none@example.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.stream_result_of_v1_health_check_response import StreamResultOfV1HealthCheckResponse  # noqa: E501

class TestStreamResultOfV1HealthCheckResponse(unittest.TestCase):
    """StreamResultOfV1HealthCheckResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StreamResultOfV1HealthCheckResponse:
        """Test StreamResultOfV1HealthCheckResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StreamResultOfV1HealthCheckResponse`
        """
        model = StreamResultOfV1HealthCheckResponse()  # noqa: E501
        if include_optional:
            return StreamResultOfV1HealthCheckResponse(
                result = openapi_client.models.v1_health_check_response.v1HealthCheckResponse(
                    status = 'UNKNOWN', ),
                error = openapi_client.models.rpc_status.rpcStatus(
                    code = 56, 
                    message = '', 
                    details = [
                        {
                            'key' : None
                            }
                        ], )
            )
        else:
            return StreamResultOfV1HealthCheckResponse(
        )
        """

    def testStreamResultOfV1HealthCheckResponse(self):
        """Test StreamResultOfV1HealthCheckResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
