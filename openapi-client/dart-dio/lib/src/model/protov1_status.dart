//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:openapi/src/model/rpc_code.dart';
import 'package:built_collection/built_collection.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'protov1_status.g.dart';

/// Protov1Status
///
/// Properties:
/// * [type] - The \"type\" member is a JSON string containing a URI reference [URI] that identifies the problem/response type. Consumers MUST use the \"type\" URI (after resolution, if necessary) as the problem/response type's primary identifier. When this member is not present, its value is assumed to be \"about:blank\".
/// * [status] - The \"status\" member is a JSON number indicating the HTTP status code ([HTTP], Section 15) generated by the origin server for this occurrence of the problem/response. The HTTP status code that corresponds to `google.rpc.Status.code`.
/// * [title] - The \"title\" member is a JSON string containing a short, human-readable summary of the problem/response type.
/// * [detail] - The \"detail\" member is a JSON string containing a human-readable explanation specific to this occurrence of the problem/response. The \"detail\" string, if present, ought to focus on helping the client correct the problem/response, rather than giving debugging information.
/// * [instance] - The \"instance\" member is a JSON string containing a URI reference that identifies the specific occurrence of the problem/response.
/// * [extensions] - Problem type definitions MAY extend the problem details object with additional members that are specific to that problem type.
/// * [code] 
@BuiltValue()
abstract class Protov1Status implements Built<Protov1Status, Protov1StatusBuilder> {
  /// The \"type\" member is a JSON string containing a URI reference [URI] that identifies the problem/response type. Consumers MUST use the \"type\" URI (after resolution, if necessary) as the problem/response type's primary identifier. When this member is not present, its value is assumed to be \"about:blank\".
  @BuiltValueField(wireName: r'type')
  String? get type;

  /// The \"status\" member is a JSON number indicating the HTTP status code ([HTTP], Section 15) generated by the origin server for this occurrence of the problem/response. The HTTP status code that corresponds to `google.rpc.Status.code`.
  @BuiltValueField(wireName: r'status')
  int? get status;

  /// The \"title\" member is a JSON string containing a short, human-readable summary of the problem/response type.
  @BuiltValueField(wireName: r'title')
  String? get title;

  /// The \"detail\" member is a JSON string containing a human-readable explanation specific to this occurrence of the problem/response. The \"detail\" string, if present, ought to focus on helping the client correct the problem/response, rather than giving debugging information.
  @BuiltValueField(wireName: r'detail')
  String? get detail;

  /// The \"instance\" member is a JSON string containing a URI reference that identifies the specific occurrence of the problem/response.
  @BuiltValueField(wireName: r'instance')
  String? get instance;

  /// Problem type definitions MAY extend the problem details object with additional members that are specific to that problem type.
  @BuiltValueField(wireName: r'extensions')
  BuiltList<String>? get extensions;

  @BuiltValueField(wireName: r'code')
  RpcCode? get code;
  // enum codeEnum {  OK,  CANCELLED,  UNKNOWN,  INVALID_ARGUMENT,  DEADLINE_EXCEEDED,  NOT_FOUND,  ALREADY_EXISTS,  PERMISSION_DENIED,  UNAUTHENTICATED,  RESOURCE_EXHAUSTED,  FAILED_PRECONDITION,  ABORTED,  OUT_OF_RANGE,  UNIMPLEMENTED,  INTERNAL,  UNAVAILABLE,  DATA_LOSS,  };

  Protov1Status._();

  factory Protov1Status([void updates(Protov1StatusBuilder b)]) = _$Protov1Status;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(Protov1StatusBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<Protov1Status> get serializer => _$Protov1StatusSerializer();
}

class _$Protov1StatusSerializer implements PrimitiveSerializer<Protov1Status> {
  @override
  final Iterable<Type> types = const [Protov1Status, _$Protov1Status];

  @override
  final String wireName = r'Protov1Status';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    Protov1Status object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
    if (object.type != null) {
      yield r'type';
      yield serializers.serialize(
        object.type,
        specifiedType: const FullType(String),
      );
    }
    if (object.status != null) {
      yield r'status';
      yield serializers.serialize(
        object.status,
        specifiedType: const FullType(int),
      );
    }
    if (object.title != null) {
      yield r'title';
      yield serializers.serialize(
        object.title,
        specifiedType: const FullType(String),
      );
    }
    if (object.detail != null) {
      yield r'detail';
      yield serializers.serialize(
        object.detail,
        specifiedType: const FullType(String),
      );
    }
    if (object.instance != null) {
      yield r'instance';
      yield serializers.serialize(
        object.instance,
        specifiedType: const FullType(String),
      );
    }
    if (object.extensions != null) {
      yield r'extensions';
      yield serializers.serialize(
        object.extensions,
        specifiedType: const FullType(BuiltList, [FullType(String)]),
      );
    }
    if (object.code != null) {
      yield r'code';
      yield serializers.serialize(
        object.code,
        specifiedType: const FullType(RpcCode),
      );
    }
  }

  @override
  Object serialize(
    Serializers serializers,
    Protov1Status object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    return _serializeProperties(serializers, object, specifiedType: specifiedType).toList();
  }

  void _deserializeProperties(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
    required List<Object?> serializedList,
    required Protov1StatusBuilder result,
    required List<Object?> unhandled,
  }) {
    for (var i = 0; i < serializedList.length; i += 2) {
      final key = serializedList[i] as String;
      final value = serializedList[i + 1];
      switch (key) {
        case r'type':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.type = valueDes;
          break;
        case r'status':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.status = valueDes;
          break;
        case r'title':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.title = valueDes;
          break;
        case r'detail':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.detail = valueDes;
          break;
        case r'instance':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.instance = valueDes;
          break;
        case r'extensions':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(BuiltList, [FullType(String)]),
          ) as BuiltList<String>;
          result.extensions.replace(valueDes);
          break;
        case r'code':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RpcCode),
          ) as RpcCode;
          result.code = valueDes;
          break;
        default:
          unhandled.add(key);
          unhandled.add(value);
          break;
      }
    }
  }

  @override
  Protov1Status deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = Protov1StatusBuilder();
    final serializedList = (serialized as Iterable<Object?>).toList();
    final unhandled = <Object?>[];
    _deserializeProperties(
      serializers,
      serialized,
      specifiedType: specifiedType,
      serializedList: serializedList,
      unhandled: unhandled,
      result: result,
    );
    return result.build();
  }
}

