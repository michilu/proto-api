/*
An example of generating swagger via gRPC ecosystem.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: none@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RpcCode the model 'RpcCode'
type RpcCode string

// List of rpcCode
const (
	OK                  RpcCode = "OK"
	CANCELLED           RpcCode = "CANCELLED"
	UNKNOWN             RpcCode = "UNKNOWN"
	INVALID_ARGUMENT    RpcCode = "INVALID_ARGUMENT"
	DEADLINE_EXCEEDED   RpcCode = "DEADLINE_EXCEEDED"
	NOT_FOUND           RpcCode = "NOT_FOUND"
	ALREADY_EXISTS      RpcCode = "ALREADY_EXISTS"
	PERMISSION_DENIED   RpcCode = "PERMISSION_DENIED"
	UNAUTHENTICATED     RpcCode = "UNAUTHENTICATED"
	RESOURCE_EXHAUSTED  RpcCode = "RESOURCE_EXHAUSTED"
	FAILED_PRECONDITION RpcCode = "FAILED_PRECONDITION"
	ABORTED             RpcCode = "ABORTED"
	OUT_OF_RANGE        RpcCode = "OUT_OF_RANGE"
	UNIMPLEMENTED       RpcCode = "UNIMPLEMENTED"
	INTERNAL            RpcCode = "INTERNAL"
	UNAVAILABLE         RpcCode = "UNAVAILABLE"
	DATA_LOSS           RpcCode = "DATA_LOSS"
)

// All allowed values of RpcCode enum
var AllowedRpcCodeEnumValues = []RpcCode{
	"OK",
	"CANCELLED",
	"UNKNOWN",
	"INVALID_ARGUMENT",
	"DEADLINE_EXCEEDED",
	"NOT_FOUND",
	"ALREADY_EXISTS",
	"PERMISSION_DENIED",
	"UNAUTHENTICATED",
	"RESOURCE_EXHAUSTED",
	"FAILED_PRECONDITION",
	"ABORTED",
	"OUT_OF_RANGE",
	"UNIMPLEMENTED",
	"INTERNAL",
	"UNAVAILABLE",
	"DATA_LOSS",
}

func (v *RpcCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RpcCode(value)
	for _, existing := range AllowedRpcCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RpcCode", value)
}

// NewRpcCodeFromValue returns a pointer to a valid RpcCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRpcCodeFromValue(v string) (*RpcCode, error) {
	ev := RpcCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RpcCode: valid values are %v", v, AllowedRpcCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RpcCode) IsValid() bool {
	for _, existing := range AllowedRpcCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to rpcCode value
func (v RpcCode) Ptr() *RpcCode {
	return &v
}

type NullableRpcCode struct {
	value *RpcCode
	isSet bool
}

func (v NullableRpcCode) Get() *RpcCode {
	return v.value
}

func (v *NullableRpcCode) Set(val *RpcCode) {
	v.value = val
	v.isSet = true
}

func (v NullableRpcCode) IsSet() bool {
	return v.isSet
}

func (v *NullableRpcCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRpcCode(val *RpcCode) *NullableRpcCode {
	return &NullableRpcCode{value: val, isSet: true}
}

func (v NullableRpcCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRpcCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
