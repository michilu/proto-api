/*
An example of generating swagger via gRPC ecosystem.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: none@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Protov1Status type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Protov1Status{}

// Protov1Status struct for Protov1Status
type Protov1Status struct {
	// The \"type\" member is a JSON string containing a URI reference [URI] that identifies the problem/response type. Consumers MUST use the \"type\" URI (after resolution, if necessary) as the problem/response type's primary identifier. When this member is not present, its value is assumed to be \"about:blank\".
	Type *string `json:"type,omitempty"`
	// The \"status\" member is a JSON number indicating the HTTP status code ([HTTP], Section 15) generated by the origin server for this occurrence of the problem/response. The HTTP status code that corresponds to `google.rpc.Status.code`.
	Status *int32 `json:"status,omitempty"`
	// The \"title\" member is a JSON string containing a short, human-readable summary of the problem/response type.
	Title *string `json:"title,omitempty"`
	// The \"detail\" member is a JSON string containing a human-readable explanation specific to this occurrence of the problem/response. The \"detail\" string, if present, ought to focus on helping the client correct the problem/response, rather than giving debugging information.
	Detail *string `json:"detail,omitempty"`
	// The \"instance\" member is a JSON string containing a URI reference that identifies the specific occurrence of the problem/response.
	Instance *string `json:"instance,omitempty"`
	// Problem type definitions MAY extend the problem details object with additional members that are specific to that problem type.
	Extensions []string `json:"extensions,omitempty"`
	Code       *RpcCode `json:"code,omitempty"`
}

// NewProtov1Status instantiates a new Protov1Status object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtov1Status() *Protov1Status {
	this := Protov1Status{}
	var code RpcCode = OK
	this.Code = &code
	return &this
}

// NewProtov1StatusWithDefaults instantiates a new Protov1Status object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtov1StatusWithDefaults() *Protov1Status {
	this := Protov1Status{}
	var code RpcCode = OK
	this.Code = &code
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Protov1Status) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Protov1Status) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Protov1Status) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Protov1Status) SetType(v string) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Protov1Status) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Protov1Status) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Protov1Status) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *Protov1Status) SetStatus(v int32) {
	o.Status = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Protov1Status) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Protov1Status) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Protov1Status) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Protov1Status) SetTitle(v string) {
	o.Title = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *Protov1Status) GetDetail() string {
	if o == nil || IsNil(o.Detail) {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Protov1Status) GetDetailOk() (*string, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *Protov1Status) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *Protov1Status) SetDetail(v string) {
	o.Detail = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *Protov1Status) GetInstance() string {
	if o == nil || IsNil(o.Instance) {
		var ret string
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Protov1Status) GetInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *Protov1Status) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given string and assigns it to the Instance field.
func (o *Protov1Status) SetInstance(v string) {
	o.Instance = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *Protov1Status) GetExtensions() []string {
	if o == nil || IsNil(o.Extensions) {
		var ret []string
		return ret
	}
	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Protov1Status) GetExtensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *Protov1Status) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []string and assigns it to the Extensions field.
func (o *Protov1Status) SetExtensions(v []string) {
	o.Extensions = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Protov1Status) GetCode() RpcCode {
	if o == nil || IsNil(o.Code) {
		var ret RpcCode
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Protov1Status) GetCodeOk() (*RpcCode, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Protov1Status) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given RpcCode and assigns it to the Code field.
func (o *Protov1Status) SetCode(v RpcCode) {
	o.Code = &v
}

func (o Protov1Status) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Protov1Status) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	if !IsNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableProtov1Status struct {
	value *Protov1Status
	isSet bool
}

func (v NullableProtov1Status) Get() *Protov1Status {
	return v.value
}

func (v *NullableProtov1Status) Set(val *Protov1Status) {
	v.value = val
	v.isSet = true
}

func (v NullableProtov1Status) IsSet() bool {
	return v.isSet
}

func (v *NullableProtov1Status) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtov1Status(val *Protov1Status) *NullableProtov1Status {
	return &NullableProtov1Status{value: val, isSet: true}
}

func (v NullableProtov1Status) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtov1Status) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
