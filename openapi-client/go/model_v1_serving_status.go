/*
An example of generating swagger via gRPC ecosystem.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: none@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// V1ServingStatus the model 'V1ServingStatus'
type V1ServingStatus string

// List of v1ServingStatus
const (
	SERVING_STATUS_UNKNOWN_UNSPECIFIED V1ServingStatus = "SERVING_STATUS_UNKNOWN_UNSPECIFIED"
	SERVING_STATUS_SERVING             V1ServingStatus = "SERVING_STATUS_SERVING"
	SERVING_STATUS_NOT_SERVING         V1ServingStatus = "SERVING_STATUS_NOT_SERVING"
)

// All allowed values of V1ServingStatus enum
var AllowedV1ServingStatusEnumValues = []V1ServingStatus{
	"SERVING_STATUS_UNKNOWN_UNSPECIFIED",
	"SERVING_STATUS_SERVING",
	"SERVING_STATUS_NOT_SERVING",
}

func (v *V1ServingStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1ServingStatus(value)
	for _, existing := range AllowedV1ServingStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1ServingStatus", value)
}

// NewV1ServingStatusFromValue returns a pointer to a valid V1ServingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1ServingStatusFromValue(v string) (*V1ServingStatus, error) {
	ev := V1ServingStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1ServingStatus: valid values are %v", v, AllowedV1ServingStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1ServingStatus) IsValid() bool {
	for _, existing := range AllowedV1ServingStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1ServingStatus value
func (v V1ServingStatus) Ptr() *V1ServingStatus {
	return &v
}

type NullableV1ServingStatus struct {
	value *V1ServingStatus
	isSet bool
}

func (v NullableV1ServingStatus) Get() *V1ServingStatus {
	return v.value
}

func (v *NullableV1ServingStatus) Set(val *V1ServingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ServingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ServingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ServingStatus(val *V1ServingStatus) *NullableV1ServingStatus {
	return &NullableV1ServingStatus{value: val, isSet: true}
}

func (v NullableV1ServingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ServingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
