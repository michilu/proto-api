/*
An example of generating swagger via gRPC ecosystem.

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: none@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CheckResponseServingStatus the model 'CheckResponseServingStatus'
type CheckResponseServingStatus string

// List of CheckResponseServingStatus
const (
	UNKNOWN_UNSPECIFIED CheckResponseServingStatus = "SERVING_STATUS_UNKNOWN_UNSPECIFIED"
	SERVING             CheckResponseServingStatus = "SERVING_STATUS_SERVING"
	NOT_SERVING         CheckResponseServingStatus = "SERVING_STATUS_NOT_SERVING"
)

// All allowed values of CheckResponseServingStatus enum
var AllowedCheckResponseServingStatusEnumValues = []CheckResponseServingStatus{
	"SERVING_STATUS_UNKNOWN_UNSPECIFIED",
	"SERVING_STATUS_SERVING",
	"SERVING_STATUS_NOT_SERVING",
}

func (v *CheckResponseServingStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CheckResponseServingStatus(value)
	for _, existing := range AllowedCheckResponseServingStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CheckResponseServingStatus", value)
}

// NewCheckResponseServingStatusFromValue returns a pointer to a valid CheckResponseServingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCheckResponseServingStatusFromValue(v string) (*CheckResponseServingStatus, error) {
	ev := CheckResponseServingStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CheckResponseServingStatus: valid values are %v", v, AllowedCheckResponseServingStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CheckResponseServingStatus) IsValid() bool {
	for _, existing := range AllowedCheckResponseServingStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CheckResponseServingStatus value
func (v CheckResponseServingStatus) Ptr() *CheckResponseServingStatus {
	return &v
}

type NullableCheckResponseServingStatus struct {
	value *CheckResponseServingStatus
	isSet bool
}

func (v NullableCheckResponseServingStatus) Get() *CheckResponseServingStatus {
	return v.value
}

func (v *NullableCheckResponseServingStatus) Set(val *CheckResponseServingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckResponseServingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckResponseServingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckResponseServingStatus(val *CheckResponseServingStatus) *NullableCheckResponseServingStatus {
	return &NullableCheckResponseServingStatus{value: val, isSet: true}
}

func (v NullableCheckResponseServingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckResponseServingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
