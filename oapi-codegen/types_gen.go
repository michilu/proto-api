// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	OAuth2Scopes     = "OAuth2.Scopes"
)

// Defines values for RpcCode.
const (
	ABORTED            RpcCode = "ABORTED"
	ALREADYEXISTS      RpcCode = "ALREADY_EXISTS"
	CANCELLED          RpcCode = "CANCELLED"
	DATALOSS           RpcCode = "DATA_LOSS"
	DEADLINEEXCEEDED   RpcCode = "DEADLINE_EXCEEDED"
	FAILEDPRECONDITION RpcCode = "FAILED_PRECONDITION"
	INTERNAL           RpcCode = "INTERNAL"
	INVALIDARGUMENT    RpcCode = "INVALID_ARGUMENT"
	NOTFOUND           RpcCode = "NOT_FOUND"
	OK                 RpcCode = "OK"
	OUTOFRANGE         RpcCode = "OUT_OF_RANGE"
	PERMISSIONDENIED   RpcCode = "PERMISSION_DENIED"
	RESOURCEEXHAUSTED  RpcCode = "RESOURCE_EXHAUSTED"
	UNAUTHENTICATED    RpcCode = "UNAUTHENTICATED"
	UNAVAILABLE        RpcCode = "UNAVAILABLE"
	UNIMPLEMENTED      RpcCode = "UNIMPLEMENTED"
	UNKNOWN            RpcCode = "UNKNOWN"
)

// Defines values for V1ServingStatus.
const (
	SERVINGSTATUSNOTSERVING         V1ServingStatus = "SERVING_STATUS_NOT_SERVING"
	SERVINGSTATUSSERVING            V1ServingStatus = "SERVING_STATUS_SERVING"
	SERVINGSTATUSUNKNOWNUNSPECIFIED V1ServingStatus = "SERVING_STATUS_UNKNOWN_UNSPECIFIED"
)

// ExampleServiceQueryBody defines model for ExampleServiceQueryBody.
type ExampleServiceQueryBody = map[string]interface{}

// Protov1Status defines model for protov1Status.
type Protov1Status struct {
	// Code The canonical error codes for gRPC APIs.
	//
	//
	// Sometimes multiple error codes may apply.  Services should return
	// the most specific error code that applies.  For example, prefer
	// `OUT_OF_RANGE` over `FAILED_PRECONDITION` if both codes apply.
	// Similarly prefer `NOT_FOUND` or `ALREADY_EXISTS` over `FAILED_PRECONDITION`.
	//
	//  - OK: Not an error; returned on success.
	//
	// HTTP Mapping: 200 OK
	//  - CANCELLED: The operation was cancelled, typically by the caller.
	//
	// HTTP Mapping: 499 Client Closed Request
	//  - UNKNOWN: Unknown error.  For example, this error may be returned when
	// a `Status` value received from another address space belongs to
	// an error space that is not known in this address space.  Also
	// errors raised by APIs that do not return enough error information
	// may be converted to this error.
	//
	// HTTP Mapping: 500 Internal Server Error
	//  - INVALID_ARGUMENT: The client specified an invalid argument.  Note that this differs
	// from `FAILED_PRECONDITION`.  `INVALID_ARGUMENT` indicates arguments
	// that are problematic regardless of the state of the system
	// (e.g., a malformed file name).
	//
	// HTTP Mapping: 400 Bad Request
	//  - DEADLINE_EXCEEDED: The deadline expired before the operation could complete. For operations
	// that change the state of the system, this error may be returned
	// even if the operation has completed successfully.  For example, a
	// successful response from a server could have been delayed long
	// enough for the deadline to expire.
	//
	// HTTP Mapping: 504 Gateway Timeout
	//  - NOT_FOUND: Some requested entity (e.g., file or directory) was not found.
	//
	// Note to server developers: if a request is denied for an entire class
	// of users, such as gradual feature rollout or undocumented allowlist,
	// `NOT_FOUND` may be used. If a request is denied for some users within
	// a class of users, such as user-based access control, `PERMISSION_DENIED`
	// must be used.
	//
	// HTTP Mapping: 404 Not Found
	//  - ALREADY_EXISTS: The entity that a client attempted to create (e.g., file or directory)
	// already exists.
	//
	// HTTP Mapping: 409 Conflict
	//  - PERMISSION_DENIED: The caller does not have permission to execute the specified
	// operation. `PERMISSION_DENIED` must not be used for rejections
	// caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
	// instead for those errors). `PERMISSION_DENIED` must not be
	// used if the caller can not be identified (use `UNAUTHENTICATED`
	// instead for those errors). This error code does not imply the
	// request is valid or the requested entity exists or satisfies
	// other pre-conditions.
	//
	// HTTP Mapping: 403 Forbidden
	//  - UNAUTHENTICATED: The request does not have valid authentication credentials for the
	// operation.
	//
	// HTTP Mapping: 401 Unauthorized
	//  - RESOURCE_EXHAUSTED: Some resource has been exhausted, perhaps a per-user quota, or
	// perhaps the entire file system is out of space.
	//
	// HTTP Mapping: 429 Too Many Requests
	//  - FAILED_PRECONDITION: The operation was rejected because the system is not in a state
	// required for the operation's execution.  For example, the directory
	// to be deleted is non-empty, an rmdir operation is applied to
	// a non-directory, etc.
	//
	// Service implementors can use the following guidelines to decide
	// between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
	//  (a) Use `UNAVAILABLE` if the client can retry just the failing call.
	//  (b) Use `ABORTED` if the client should retry at a higher level. For
	//      example, when a client-specified test-and-set fails, indicating the
	//      client should restart a read-modify-write sequence.
	//  (c) Use `FAILED_PRECONDITION` if the client should not retry until
	//      the system state has been explicitly fixed. For example, if an "rmdir"
	//      fails because the directory is non-empty, `FAILED_PRECONDITION`
	//      should be returned since the client should not retry unless
	//      the files are deleted from the directory.
	//
	// HTTP Mapping: 400 Bad Request
	//  - ABORTED: The operation was aborted, typically due to a concurrency issue such as
	// a sequencer check failure or transaction abort.
	//
	// See the guidelines above for deciding between `FAILED_PRECONDITION`,
	// `ABORTED`, and `UNAVAILABLE`.
	//
	// HTTP Mapping: 409 Conflict
	//  - OUT_OF_RANGE: The operation was attempted past the valid range.  E.g., seeking or
	// reading past end-of-file.
	//
	// Unlike `INVALID_ARGUMENT`, this error indicates a problem that may
	// be fixed if the system state changes. For example, a 32-bit file
	// system will generate `INVALID_ARGUMENT` if asked to read at an
	// offset that is not in the range [0,2^32-1], but it will generate
	// `OUT_OF_RANGE` if asked to read from an offset past the current
	// file size.
	//
	// There is a fair bit of overlap between `FAILED_PRECONDITION` and
	// `OUT_OF_RANGE`.  We recommend using `OUT_OF_RANGE` (the more specific
	// error) when it applies so that callers who are iterating through
	// a space can easily look for an `OUT_OF_RANGE` error to detect when
	// they are done.
	//
	// HTTP Mapping: 400 Bad Request
	//  - UNIMPLEMENTED: The operation is not implemented or is not supported/enabled in this
	// service.
	//
	// HTTP Mapping: 501 Not Implemented
	//  - INTERNAL: Internal errors.  This means that some invariants expected by the
	// underlying system have been broken.  This error code is reserved
	// for serious errors.
	//
	// HTTP Mapping: 500 Internal Server Error
	//  - UNAVAILABLE: The service is currently unavailable.  This is most likely a
	// transient condition, which can be corrected by retrying with
	// a backoff. Note that it is not always safe to retry
	// non-idempotent operations.
	//
	// See the guidelines above for deciding between `FAILED_PRECONDITION`,
	// `ABORTED`, and `UNAVAILABLE`.
	//
	// HTTP Mapping: 503 Service Unavailable
	//  - DATA_LOSS: Unrecoverable data loss or corruption.
	//
	// HTTP Mapping: 500 Internal Server Error
	Code *RpcCode `json:"code,omitempty"`

	// Detail The "detail" member is a JSON string containing a human-readable explanation specific to this occurrence of the problem/response.
	// The "detail" string, if present, ought to focus on helping the client correct the problem/response, rather than giving debugging information.
	Detail *string `json:"detail,omitempty"`

	// Extensions Problem type definitions MAY extend the problem details object with additional members that are specific to that problem type.
	Extensions *[]string `json:"extensions,omitempty"`

	// Instance The "instance" member is a JSON string containing a URI reference that identifies the specific occurrence of the problem/response.
	Instance *string `json:"instance,omitempty"`

	// Status The "status" member is a JSON number indicating the HTTP status code ([HTTP], Section 15) generated by the origin server for this occurrence of the problem/response.
	// The HTTP status code that corresponds to `google.rpc.Status.code`.
	Status *int32 `json:"status,omitempty"`

	// Title The "title" member is a JSON string containing a short, human-readable summary of the problem/response type.
	Title *string `json:"title,omitempty"`

	// Type The "type" member is a JSON string containing a URI reference [URI] that identifies the problem/response type. Consumers MUST use the "type" URI (after resolution, if necessary) as the problem/response type's primary identifier.
	// When this member is not present, its value is assumed to be "about:blank".
	Type *string `json:"type,omitempty"`
}

// RpcCode The canonical error codes for gRPC APIs.
//
// Sometimes multiple error codes may apply.  Services should return
// the most specific error code that applies.  For example, prefer
// `OUT_OF_RANGE` over `FAILED_PRECONDITION` if both codes apply.
// Similarly prefer `NOT_FOUND` or `ALREADY_EXISTS` over `FAILED_PRECONDITION`.
//
//   - OK: Not an error; returned on success.
//
// HTTP Mapping: 200 OK
//   - CANCELLED: The operation was cancelled, typically by the caller.
//
// HTTP Mapping: 499 Client Closed Request
//   - UNKNOWN: Unknown error.  For example, this error may be returned when
//
// a `Status` value received from another address space belongs to
// an error space that is not known in this address space.  Also
// errors raised by APIs that do not return enough error information
// may be converted to this error.
//
// HTTP Mapping: 500 Internal Server Error
//   - INVALID_ARGUMENT: The client specified an invalid argument.  Note that this differs
//
// from `FAILED_PRECONDITION`.  `INVALID_ARGUMENT` indicates arguments
// that are problematic regardless of the state of the system
// (e.g., a malformed file name).
//
// HTTP Mapping: 400 Bad Request
//   - DEADLINE_EXCEEDED: The deadline expired before the operation could complete. For operations
//
// that change the state of the system, this error may be returned
// even if the operation has completed successfully.  For example, a
// successful response from a server could have been delayed long
// enough for the deadline to expire.
//
// HTTP Mapping: 504 Gateway Timeout
//   - NOT_FOUND: Some requested entity (e.g., file or directory) was not found.
//
// Note to server developers: if a request is denied for an entire class
// of users, such as gradual feature rollout or undocumented allowlist,
// `NOT_FOUND` may be used. If a request is denied for some users within
// a class of users, such as user-based access control, `PERMISSION_DENIED`
// must be used.
//
// HTTP Mapping: 404 Not Found
//   - ALREADY_EXISTS: The entity that a client attempted to create (e.g., file or directory)
//
// already exists.
//
// HTTP Mapping: 409 Conflict
//   - PERMISSION_DENIED: The caller does not have permission to execute the specified
//
// operation. `PERMISSION_DENIED` must not be used for rejections
// caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
// instead for those errors). `PERMISSION_DENIED` must not be
// used if the caller can not be identified (use `UNAUTHENTICATED`
// instead for those errors). This error code does not imply the
// request is valid or the requested entity exists or satisfies
// other pre-conditions.
//
// HTTP Mapping: 403 Forbidden
//   - UNAUTHENTICATED: The request does not have valid authentication credentials for the
//
// operation.
//
// HTTP Mapping: 401 Unauthorized
//   - RESOURCE_EXHAUSTED: Some resource has been exhausted, perhaps a per-user quota, or
//
// perhaps the entire file system is out of space.
//
// HTTP Mapping: 429 Too Many Requests
//   - FAILED_PRECONDITION: The operation was rejected because the system is not in a state
//
// required for the operation's execution.  For example, the directory
// to be deleted is non-empty, an rmdir operation is applied to
// a non-directory, etc.
//
// Service implementors can use the following guidelines to decide
// between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
//
//	(a) Use `UNAVAILABLE` if the client can retry just the failing call.
//	(b) Use `ABORTED` if the client should retry at a higher level. For
//	    example, when a client-specified test-and-set fails, indicating the
//	    client should restart a read-modify-write sequence.
//	(c) Use `FAILED_PRECONDITION` if the client should not retry until
//	    the system state has been explicitly fixed. For example, if an "rmdir"
//	    fails because the directory is non-empty, `FAILED_PRECONDITION`
//	    should be returned since the client should not retry unless
//	    the files are deleted from the directory.
//
// HTTP Mapping: 400 Bad Request
//   - ABORTED: The operation was aborted, typically due to a concurrency issue such as
//
// a sequencer check failure or transaction abort.
//
// See the guidelines above for deciding between `FAILED_PRECONDITION`,
// `ABORTED`, and `UNAVAILABLE`.
//
// HTTP Mapping: 409 Conflict
//   - OUT_OF_RANGE: The operation was attempted past the valid range.  E.g., seeking or
//
// reading past end-of-file.
//
// Unlike `INVALID_ARGUMENT`, this error indicates a problem that may
// be fixed if the system state changes. For example, a 32-bit file
// system will generate `INVALID_ARGUMENT` if asked to read at an
// offset that is not in the range [0,2^32-1], but it will generate
// `OUT_OF_RANGE` if asked to read from an offset past the current
// file size.
//
// There is a fair bit of overlap between `FAILED_PRECONDITION` and
// `OUT_OF_RANGE`.  We recommend using `OUT_OF_RANGE` (the more specific
// error) when it applies so that callers who are iterating through
// a space can easily look for an `OUT_OF_RANGE` error to detect when
// they are done.
//
// HTTP Mapping: 400 Bad Request
//   - UNIMPLEMENTED: The operation is not implemented or is not supported/enabled in this
//
// service.
//
// HTTP Mapping: 501 Not Implemented
//   - INTERNAL: Internal errors.  This means that some invariants expected by the
//
// underlying system have been broken.  This error code is reserved
// for serious errors.
//
// HTTP Mapping: 500 Internal Server Error
//   - UNAVAILABLE: The service is currently unavailable.  This is most likely a
//
// transient condition, which can be corrected by retrying with
// a backoff. Note that it is not always safe to retry
// non-idempotent operations.
//
// See the guidelines above for deciding between `FAILED_PRECONDITION`,
// `ABORTED`, and `UNAVAILABLE`.
//
// HTTP Mapping: 503 Service Unavailable
//   - DATA_LOSS: Unrecoverable data loss or corruption.
//
// HTTP Mapping: 500 Internal Server Error
type RpcCode string

// V1CheckResponse The response message containing the health status of the service.
type V1CheckResponse struct {
	Status V1ServingStatus `json:"status"`
}

// V1ExampleServiceQueryResponse defines model for v1ExampleServiceQueryResponse.
type V1ExampleServiceQueryResponse struct {
	Status *Protov1Status `json:"status,omitempty"`
}

// V1ServingStatus defines model for v1ServingStatus.
type V1ServingStatus string

// HealthServiceCheckParams defines parameters for HealthServiceCheck.
type HealthServiceCheckParams struct {
	// Service The service name as specified.
	Service string `form:"service" json:"service"`
}

// ExampleServiceQueryJSONRequestBody defines body for ExampleServiceQuery for application/json ContentType.
type ExampleServiceQueryJSONRequestBody = ExampleServiceQueryBody
