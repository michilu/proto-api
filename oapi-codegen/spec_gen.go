// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XDbUt68piYgPDvD0dPv0PwEAAP//l2pKU9onAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
