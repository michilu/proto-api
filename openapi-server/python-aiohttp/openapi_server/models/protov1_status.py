# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rpc_code import RpcCode
from openapi_server import util


class Protov1Status(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, status: int=None, title: str=None, detail: str=None, instance: str=None, extensions: List[str]=None, code: RpcCode=None):
        """Protov1Status - a model defined in OpenAPI

        :param type: The type of this Protov1Status.
        :param status: The status of this Protov1Status.
        :param title: The title of this Protov1Status.
        :param detail: The detail of this Protov1Status.
        :param instance: The instance of this Protov1Status.
        :param extensions: The extensions of this Protov1Status.
        :param code: The code of this Protov1Status.
        """
        self.openapi_types = {
            'type': str,
            'status': int,
            'title': str,
            'detail': str,
            'instance': str,
            'extensions': List[str],
            'code': RpcCode
        }

        self.attribute_map = {
            'type': 'type',
            'status': 'status',
            'title': 'title',
            'detail': 'detail',
            'instance': 'instance',
            'extensions': 'extensions',
            'code': 'code'
        }

        self._type = type
        self._status = status
        self._title = title
        self._detail = detail
        self._instance = instance
        self._extensions = extensions
        self._code = code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Protov1Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The protov1Status of this Protov1Status.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this Protov1Status.

        The \"type\" member is a JSON string containing a URI reference [URI] that identifies the problem/response type. Consumers MUST use the \"type\" URI (after resolution, if necessary) as the problem/response type's primary identifier. When this member is not present, its value is assumed to be \"about:blank\".

        :return: The type of this Protov1Status.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Protov1Status.

        The \"type\" member is a JSON string containing a URI reference [URI] that identifies the problem/response type. Consumers MUST use the \"type\" URI (after resolution, if necessary) as the problem/response type's primary identifier. When this member is not present, its value is assumed to be \"about:blank\".

        :param type: The type of this Protov1Status.
        :type type: str
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this Protov1Status.

        The \"status\" member is a JSON number indicating the HTTP status code ([HTTP], Section 15) generated by the origin server for this occurrence of the problem/response. The HTTP status code that corresponds to `google.rpc.Status.code`.

        :return: The status of this Protov1Status.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Protov1Status.

        The \"status\" member is a JSON number indicating the HTTP status code ([HTTP], Section 15) generated by the origin server for this occurrence of the problem/response. The HTTP status code that corresponds to `google.rpc.Status.code`.

        :param status: The status of this Protov1Status.
        :type status: int
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this Protov1Status.

        The \"title\" member is a JSON string containing a short, human-readable summary of the problem/response type.

        :return: The title of this Protov1Status.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Protov1Status.

        The \"title\" member is a JSON string containing a short, human-readable summary of the problem/response type.

        :param title: The title of this Protov1Status.
        :type title: str
        """

        self._title = title

    @property
    def detail(self):
        """Gets the detail of this Protov1Status.

        The \"detail\" member is a JSON string containing a human-readable explanation specific to this occurrence of the problem/response. The \"detail\" string, if present, ought to focus on helping the client correct the problem/response, rather than giving debugging information.

        :return: The detail of this Protov1Status.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Protov1Status.

        The \"detail\" member is a JSON string containing a human-readable explanation specific to this occurrence of the problem/response. The \"detail\" string, if present, ought to focus on helping the client correct the problem/response, rather than giving debugging information.

        :param detail: The detail of this Protov1Status.
        :type detail: str
        """

        self._detail = detail

    @property
    def instance(self):
        """Gets the instance of this Protov1Status.

        The \"instance\" member is a JSON string containing a URI reference that identifies the specific occurrence of the problem/response.

        :return: The instance of this Protov1Status.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this Protov1Status.

        The \"instance\" member is a JSON string containing a URI reference that identifies the specific occurrence of the problem/response.

        :param instance: The instance of this Protov1Status.
        :type instance: str
        """

        self._instance = instance

    @property
    def extensions(self):
        """Gets the extensions of this Protov1Status.

        Problem type definitions MAY extend the problem details object with additional members that are specific to that problem type.

        :return: The extensions of this Protov1Status.
        :rtype: List[str]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this Protov1Status.

        Problem type definitions MAY extend the problem details object with additional members that are specific to that problem type.

        :param extensions: The extensions of this Protov1Status.
        :type extensions: List[str]
        """

        self._extensions = extensions

    @property
    def code(self):
        """Gets the code of this Protov1Status.


        :return: The code of this Protov1Status.
        :rtype: RpcCode
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Protov1Status.


        :param code: The code of this Protov1Status.
        :type code: RpcCode
        """

        self._code = code
