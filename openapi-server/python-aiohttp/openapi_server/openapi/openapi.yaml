openapi: 3.0.1
info:
  contact:
    email: none@example.com
    url: https://github.com/michilu/proto-api
  license:
    name: Apache-2.0
    url: https://github.com/michilu/proto-api/blob/master/LICENSE
  title: An example of generating swagger via gRPC ecosystem.
  version: "1.0"
servers:
- url: /
security:
- ApiKeyAuth: []
  OAuth2:
  - read
  - write
tags:
- name: Health
- name: ExampleService
paths:
  /healthCheck:
    get:
      operationId: health_check
      parameters:
      - in: query
        name: service
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1HealthCheckResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      tags:
      - Health
      x-openapi-router-controller: openapi_server.controllers.health_controller
  /healthWatch:
    get:
      operationId: health_watch
      parameters:
      - in: query
        name: service
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream_result_of_v1HealthCheckResponse'
          description: A successful response.(streaming responses)
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      tags:
      - Health
      x-openapi-router-controller: openapi_server.controllers.health_controller
  /v1/example/{id}:
    post:
      operationId: example_service_query
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ExampleServiceQueryResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
          description: An unexpected error response.
      security:
      - ApiKeyAuth: []
        OAuth2:
        - read
        - write
      tags:
      - ExampleService
      x-codegen-request-body-name: body
      x-openapi-router-controller: openapi_server.controllers.example_service_controller
components:
  schemas:
    HealthCheckResponseServingStatus:
      default: UNKNOWN
      enum:
      - UNKNOWN
      - SERVING
      - NOT_SERVING
      - SERVICE_UNKNOWN
      title: HealthCheckResponseServingStatus
      type: string
    protobufAny:
      additionalProperties:
        type: object
      example:
        '@type': '@type'
      properties:
        '@type':
          type: string
      title: protobufAny
      type: object
    protov1Response:
      example:
        code: null
        message: message
      properties:
        code:
          $ref: '#/components/schemas/rpcCode'
        message:
          title: message
          type: string
      title: protov1Response
      type: object
    rpcCode:
      default: OK
      enum:
      - OK
      - CANCELLED
      - UNKNOWN
      - INVALID_ARGUMENT
      - DEADLINE_EXCEEDED
      - NOT_FOUND
      - ALREADY_EXISTS
      - PERMISSION_DENIED
      - UNAUTHENTICATED
      - RESOURCE_EXHAUSTED
      - FAILED_PRECONDITION
      - ABORTED
      - OUT_OF_RANGE
      - UNIMPLEMENTED
      - INTERNAL
      - UNAVAILABLE
      - DATA_LOSS
      title: rpcCode
      type: string
    rpcStatus:
      example:
        code: 0
        details:
        - '@type': '@type'
        - '@type': '@type'
        message: message
      properties:
        code:
          format: int32
          title: code
          type: integer
        message:
          title: message
          type: string
        details:
          items:
            $ref: '#/components/schemas/protobufAny'
          title: details
          type: array
      title: rpcStatus
      type: object
    v1ExampleServiceQueryResponse:
      example:
        value:
          code: null
          message: message
      properties:
        value:
          $ref: '#/components/schemas/protov1Response'
      title: v1ExampleServiceQueryResponse
      type: object
    v1HealthCheckResponse:
      example:
        status: null
      properties:
        status:
          $ref: '#/components/schemas/HealthCheckResponseServingStatus'
      title: v1HealthCheckResponse
      type: object
    Stream_result_of_v1HealthCheckResponse:
      example:
        result:
          status: null
        error:
          code: 0
          details:
          - '@type': '@type'
          - '@type': '@type'
          message: message
      properties:
        result:
          $ref: '#/components/schemas/v1HealthCheckResponse'
        error:
          $ref: '#/components/schemas/rpcStatus'
      title: Stream result of v1HealthCheckResponse
      type: object
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: X-API-Key
      type: apiKey
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_ApiKeyAuth
    OAuth2:
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          scopes:
            admin: Grants read and write access to administrative information
            read: Grants read access
            write: Grants write access
          tokenUrl: https://example.com/oauth/token
      type: oauth2
      x-tokenInfoFunc: openapi_server.controllers.security_controller.info_from_OAuth2
      x-scopeValidateFunc: openapi_server.controllers.security_controller.validate_scope_OAuth2
x-original-swagger-version: "2.0"
