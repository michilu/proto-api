/*
 * An example of generating swagger via gRPC ecosystem.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Contact: none@example.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// HealthAPIController binds http requests to an api service and writes the service results to the http response
type HealthAPIController struct {
	service      HealthAPIServicer
	errorHandler ErrorHandler
}

// HealthAPIOption for how the controller is set up.
type HealthAPIOption func(*HealthAPIController)

// WithHealthAPIErrorHandler inject ErrorHandler into controller
func WithHealthAPIErrorHandler(h ErrorHandler) HealthAPIOption {
	return func(c *HealthAPIController) {
		c.errorHandler = h
	}
}

// NewHealthAPIController creates a default api controller
func NewHealthAPIController(s HealthAPIServicer, opts ...HealthAPIOption) Router {
	controller := &HealthAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the HealthAPIController
func (c *HealthAPIController) Routes() Routes {
	return Routes{
		"HealthCheck": Route{
			strings.ToUpper("Get"),
			"/healthCheck",
			c.HealthCheck,
		},
		"HealthWatch": Route{
			strings.ToUpper("Get"),
			"/healthWatch",
			c.HealthWatch,
		},
	}
}

// HealthCheck -
func (c *HealthAPIController) HealthCheck(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	serviceParam := query.Get("service")
	result, err := c.service.HealthCheck(r.Context(), serviceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HealthWatch -
func (c *HealthAPIController) HealthWatch(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	serviceParam := query.Get("service")
	result, err := c.service.HealthWatch(r.Context(), serviceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
