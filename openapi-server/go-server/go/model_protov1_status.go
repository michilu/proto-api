/*
 * An example of generating swagger via gRPC ecosystem.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Contact: none@example.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Protov1Status struct {

	// The \"type\" member is a JSON string containing a URI reference [URI] that identifies the problem/response type. Consumers MUST use the \"type\" URI (after resolution, if necessary) as the problem/response type's primary identifier. When this member is not present, its value is assumed to be \"about:blank\".
	Type string `json:"type,omitempty"`

	// The \"status\" member is a JSON number indicating the HTTP status code ([HTTP], Section 15) generated by the origin server for this occurrence of the problem/response. The HTTP status code that corresponds to `google.rpc.Status.code`.
	Status int32 `json:"status,omitempty"`

	// The \"title\" member is a JSON string containing a short, human-readable summary of the problem/response type.
	Title string `json:"title,omitempty"`

	// The \"detail\" member is a JSON string containing a human-readable explanation specific to this occurrence of the problem/response. The \"detail\" string, if present, ought to focus on helping the client correct the problem/response, rather than giving debugging information.
	Detail string `json:"detail,omitempty"`

	// The \"instance\" member is a JSON string containing a URI reference that identifies the specific occurrence of the problem/response.
	Instance string `json:"instance,omitempty"`

	// Problem type definitions MAY extend the problem details object with additional members that are specific to that problem type.
	Extensions []string `json:"extensions,omitempty"`

	Code RpcCode `json:"code,omitempty"`
}

// AssertProtov1StatusRequired checks if the required fields are not zero-ed
func AssertProtov1StatusRequired(obj Protov1Status) error {
	return nil
}

// AssertProtov1StatusConstraints checks if the values respects the defined constraints
func AssertProtov1StatusConstraints(obj Protov1Status) error {
	return nil
}
