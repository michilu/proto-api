// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * An example of generating swagger via gRPC ecosystem.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Contact: none@example.com
 */

package openapi

import (
	"net/http"
	"strings"
)

// HealthServiceAPIController binds http requests to an api service and writes the service results to the http response
type HealthServiceAPIController struct {
	service      HealthServiceAPIServicer
	errorHandler ErrorHandler
}

// HealthServiceAPIOption for how the controller is set up.
type HealthServiceAPIOption func(*HealthServiceAPIController)

// WithHealthServiceAPIErrorHandler inject ErrorHandler into controller
func WithHealthServiceAPIErrorHandler(h ErrorHandler) HealthServiceAPIOption {
	return func(c *HealthServiceAPIController) {
		c.errorHandler = h
	}
}

// NewHealthServiceAPIController creates a default api controller
func NewHealthServiceAPIController(s HealthServiceAPIServicer, opts ...HealthServiceAPIOption) *HealthServiceAPIController {
	controller := &HealthServiceAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the HealthServiceAPIController
func (c *HealthServiceAPIController) Routes() Routes {
	return Routes{
		"HealthServiceCheck": Route{
			"HealthServiceCheck",
			strings.ToUpper("Get"),
			"/v1/healthCheck",
			c.HealthServiceCheck,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the HealthServiceAPIController
func (c *HealthServiceAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"HealthServiceCheck",
			strings.ToUpper("Get"),
			"/v1/healthCheck",
			c.HealthServiceCheck,
		},
	}
}

// HealthServiceCheck -
func (c *HealthServiceAPIController) HealthServiceCheck(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var serviceParam string
	if query.Has("service") {
		param := query.Get("service")

		serviceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "service"}, nil)
		return
	}
	result, err := c.service.HealthServiceCheck(r.Context(), serviceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
