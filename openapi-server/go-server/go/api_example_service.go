/*
 * An example of generating swagger via gRPC ecosystem.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Contact: none@example.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ExampleServiceAPIController binds http requests to an api service and writes the service results to the http response
type ExampleServiceAPIController struct {
	service      ExampleServiceAPIServicer
	errorHandler ErrorHandler
}

// ExampleServiceAPIOption for how the controller is set up.
type ExampleServiceAPIOption func(*ExampleServiceAPIController)

// WithExampleServiceAPIErrorHandler inject ErrorHandler into controller
func WithExampleServiceAPIErrorHandler(h ErrorHandler) ExampleServiceAPIOption {
	return func(c *ExampleServiceAPIController) {
		c.errorHandler = h
	}
}

// NewExampleServiceAPIController creates a default api controller
func NewExampleServiceAPIController(s ExampleServiceAPIServicer, opts ...ExampleServiceAPIOption) Router {
	controller := &ExampleServiceAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ExampleServiceAPIController
func (c *ExampleServiceAPIController) Routes() Routes {
	return Routes{
		"Query": Route{
			strings.ToUpper("Post"),
			"/v1/example/{id}",
			c.Query,
		},
	}
}

// Query -
func (c *ExampleServiceAPIController) Query(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	bodyParam := V1ExampleServiceQueryRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertV1ExampleServiceQueryRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertV1ExampleServiceQueryRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Query(r.Context(), idParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
