// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"github.com/go-faster/errors"
)

type ApiKeyAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *ApiKeyAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *ApiKeyAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// Ref: #/components/schemas/CheckResponseServingStatus
type CheckResponseServingStatus string

const (
	CheckResponseServingStatusSERVINGSTATUSUNKNOWNUNSPECIFIED CheckResponseServingStatus = "SERVING_STATUS_UNKNOWN_UNSPECIFIED"
	CheckResponseServingStatusSERVINGSTATUSSERVING            CheckResponseServingStatus = "SERVING_STATUS_SERVING"
	CheckResponseServingStatusSERVINGSTATUSNOTSERVING         CheckResponseServingStatus = "SERVING_STATUS_NOT_SERVING"
)

// AllValues returns all CheckResponseServingStatus values.
func (CheckResponseServingStatus) AllValues() []CheckResponseServingStatus {
	return []CheckResponseServingStatus{
		CheckResponseServingStatusSERVINGSTATUSUNKNOWNUNSPECIFIED,
		CheckResponseServingStatusSERVINGSTATUSSERVING,
		CheckResponseServingStatusSERVINGSTATUSNOTSERVING,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CheckResponseServingStatus) MarshalText() ([]byte, error) {
	switch s {
	case CheckResponseServingStatusSERVINGSTATUSUNKNOWNUNSPECIFIED:
		return []byte(s), nil
	case CheckResponseServingStatusSERVINGSTATUSSERVING:
		return []byte(s), nil
	case CheckResponseServingStatusSERVINGSTATUSNOTSERVING:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CheckResponseServingStatus) UnmarshalText(data []byte) error {
	switch CheckResponseServingStatus(data) {
	case CheckResponseServingStatusSERVINGSTATUSUNKNOWNUNSPECIFIED:
		*s = CheckResponseServingStatusSERVINGSTATUSUNKNOWNUNSPECIFIED
		return nil
	case CheckResponseServingStatusSERVINGSTATUSSERVING:
		*s = CheckResponseServingStatusSERVINGSTATUSSERVING
		return nil
	case CheckResponseServingStatusSERVINGSTATUSNOTSERVING:
		*s = CheckResponseServingStatusSERVINGSTATUSNOTSERVING
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ExampleServiceQueryBody
type ExampleServiceQueryBody struct{}

type OAuth2 struct {
	Token  string
	Scopes []string
}

// GetToken returns the value of Token.
func (s *OAuth2) GetToken() string {
	return s.Token
}

// GetScopes returns the value of Scopes.
func (s *OAuth2) GetScopes() []string {
	return s.Scopes
}

// SetToken sets the value of Token.
func (s *OAuth2) SetToken(val string) {
	s.Token = val
}

// SetScopes sets the value of Scopes.
func (s *OAuth2) SetScopes(val []string) {
	s.Scopes = val
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtov1Status returns new OptProtov1Status with value set to v.
func NewOptProtov1Status(v Protov1Status) OptProtov1Status {
	return OptProtov1Status{
		Value: v,
		Set:   true,
	}
}

// OptProtov1Status is optional Protov1Status.
type OptProtov1Status struct {
	Value Protov1Status
	Set   bool
}

// IsSet returns true if OptProtov1Status was set.
func (o OptProtov1Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtov1Status) Reset() {
	var v Protov1Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtov1Status) SetTo(v Protov1Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtov1Status) Get() (v Protov1Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtov1Status) Or(d Protov1Status) Protov1Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRpcCode returns new OptRpcCode with value set to v.
func NewOptRpcCode(v RpcCode) OptRpcCode {
	return OptRpcCode{
		Value: v,
		Set:   true,
	}
}

// OptRpcCode is optional RpcCode.
type OptRpcCode struct {
	Value RpcCode
	Set   bool
}

// IsSet returns true if OptRpcCode was set.
func (o OptRpcCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRpcCode) Reset() {
	var v RpcCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRpcCode) SetTo(v RpcCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRpcCode) Get() (v RpcCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRpcCode) Or(d RpcCode) RpcCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/protov1Status
type Protov1Status struct {
	// The "type" member is a JSON string containing a URI reference [URI] that identifies the
	// problem/response type. Consumers MUST use the "type" URI (after resolution, if necessary) as the
	// problem/response type's primary identifier.
	// When this member is not present, its value is assumed to be "about:blank".
	Type OptString `json:"type"`
	// The "status" member is a JSON number indicating the HTTP status code ([HTTP], Section 15)
	// generated by the origin server for this occurrence of the problem/response.
	// The HTTP status code that corresponds to `google.rpc.Status.code`.
	Status OptInt32 `json:"status"`
	// The "title" member is a JSON string containing a short, human-readable summary of the
	// problem/response type.
	Title OptString `json:"title"`
	// The "detail" member is a JSON string containing a human-readable explanation specific to this
	// occurrence of the problem/response.
	// The "detail" string, if present, ought to focus on helping the client correct the problem/response,
	//  rather than giving debugging information.
	Detail OptString `json:"detail"`
	// The "instance" member is a JSON string containing a URI reference that identifies the specific
	// occurrence of the problem/response.
	Instance OptString `json:"instance"`
	// Problem type definitions MAY extend the problem details object with additional members that are
	// specific to that problem type.
	Extensions []string   `json:"extensions"`
	Code       OptRpcCode `json:"code"`
}

// GetType returns the value of Type.
func (s *Protov1Status) GetType() OptString {
	return s.Type
}

// GetStatus returns the value of Status.
func (s *Protov1Status) GetStatus() OptInt32 {
	return s.Status
}

// GetTitle returns the value of Title.
func (s *Protov1Status) GetTitle() OptString {
	return s.Title
}

// GetDetail returns the value of Detail.
func (s *Protov1Status) GetDetail() OptString {
	return s.Detail
}

// GetInstance returns the value of Instance.
func (s *Protov1Status) GetInstance() OptString {
	return s.Instance
}

// GetExtensions returns the value of Extensions.
func (s *Protov1Status) GetExtensions() []string {
	return s.Extensions
}

// GetCode returns the value of Code.
func (s *Protov1Status) GetCode() OptRpcCode {
	return s.Code
}

// SetType sets the value of Type.
func (s *Protov1Status) SetType(val OptString) {
	s.Type = val
}

// SetStatus sets the value of Status.
func (s *Protov1Status) SetStatus(val OptInt32) {
	s.Status = val
}

// SetTitle sets the value of Title.
func (s *Protov1Status) SetTitle(val OptString) {
	s.Title = val
}

// SetDetail sets the value of Detail.
func (s *Protov1Status) SetDetail(val OptString) {
	s.Detail = val
}

// SetInstance sets the value of Instance.
func (s *Protov1Status) SetInstance(val OptString) {
	s.Instance = val
}

// SetExtensions sets the value of Extensions.
func (s *Protov1Status) SetExtensions(val []string) {
	s.Extensions = val
}

// SetCode sets the value of Code.
func (s *Protov1Status) SetCode(val OptRpcCode) {
	s.Code = val
}

// The canonical error codes for gRPC APIs.
// Sometimes multiple error codes may apply.  Services should return
// the most specific error code that applies.  For example, prefer
// `OUT_OF_RANGE` over `FAILED_PRECONDITION` if both codes apply.
// Similarly prefer `NOT_FOUND` or `ALREADY_EXISTS` over `FAILED_PRECONDITION`.
// - OK: Not an error; returned on success
// HTTP Mapping: 200 OK
// - CANCELLED: The operation was cancelled, typically by the caller.
// HTTP Mapping: 499 Client Closed Request
// - UNKNOWN: Unknown error.  For example, this error may be returned when
// a `Status` value received from another address space belongs to
// an error space that is not known in this address space.  Also
// errors raised by APIs that do not return enough error information
// may be converted to this error.
// HTTP Mapping: 500 Internal Server Error
// - INVALID_ARGUMENT: The client specified an invalid argument.  Note that this differs
// from `FAILED_PRECONDITION`.  `INVALID_ARGUMENT` indicates arguments
// that are problematic regardless of the state of the system
// (e.g., a malformed file name).
// HTTP Mapping: 400 Bad Request
// - DEADLINE_EXCEEDED: The deadline expired before the operation could complete. For operations
// that change the state of the system, this error may be returned
// even if the operation has completed successfully.  For example, a
// successful response from a server could have been delayed long
// enough for the deadline to expire.
// HTTP Mapping: 504 Gateway Timeout
// - NOT_FOUND: Some requested entity (e.g., file or directory) was not found.
// Note to server developers: if a request is denied for an entire class
// of users, such as gradual feature rollout or undocumented whitelist,
// `NOT_FOUND` may be used. If a request is denied for some users within
// a class of users, such as user-based access control, `PERMISSION_DENIED`
// must be used.
// HTTP Mapping: 404 Not Found
// - ALREADY_EXISTS: The entity that a client attempted to create (e.g., file or directory)
// already exists.
// HTTP Mapping: 409 Conflict
// - PERMISSION_DENIED: The caller does not have permission to execute the specified
// operation. `PERMISSION_DENIED` must not be used for rejections
// caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
// instead for those errors). `PERMISSION_DENIED` must not be
// used if the caller can not be identified (use `UNAUTHENTICATED`
// instead for those errors). This error code does not imply the
// request is valid or the requested entity exists or satisfies
// other pre-conditions.
// HTTP Mapping: 403 Forbidden
// - UNAUTHENTICATED: The request does not have valid authentication credentials for the
// operation.
// HTTP Mapping: 401 Unauthorized
// - RESOURCE_EXHAUSTED: Some resource has been exhausted, perhaps a per-user quota, or
// perhaps the entire file system is out of space.
// HTTP Mapping: 429 Too Many Requests
// - FAILED_PRECONDITION: The operation was rejected because the system is not in a state
// required for the operation's execution.  For example, the directory
// to be deleted is non-empty, an rmdir operation is applied to
// a non-directory, etc.
// Service implementors can use the following guidelines to decide
// between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
// (a) Use `UNAVAILABLE` if the client can retry just the failing call.
// (b) Use `ABORTED` if the client should retry at a higher level
// (e.g., when a client-specified test-and-set fails, indicating the
// client should restart a read-modify-write sequence).
// (c) Use `FAILED_PRECONDITION` if the client should not retry until
// the system state has been explicitly fixed.  E.g., if an "rmdir"
// fails because the directory is non-empty, `FAILED_PRECONDITION`
// should be returned since the client should not retry unless
// the files are deleted from the directory.
// HTTP Mapping: 400 Bad Request
// - ABORTED: The operation was aborted, typically due to a concurrency issue such as
// a sequencer check failure or transaction abort.
// See the guidelines above for deciding between `FAILED_PRECONDITION`,
// `ABORTED`, and `UNAVAILABLE`.
// HTTP Mapping: 409 Conflict
// - OUT_OF_RANGE: The operation was attempted past the valid range.  E.g., seeking or
// reading past end-of-file.
// Unlike `INVALID_ARGUMENT`, this error indicates a problem that may
// be fixed if the system state changes. For example, a 32-bit file
// system will generate `INVALID_ARGUMENT` if asked to read at an
// offset that is not in the range [0,2^32-1], but it will generate
// `OUT_OF_RANGE` if asked to read from an offset past the current
// file size.
// There is a fair bit of overlap between `FAILED_PRECONDITION` and
// `OUT_OF_RANGE`.  We recommend using `OUT_OF_RANGE` (the more specific
// error) when it applies so that callers who are iterating through
// a space can easily look for an `OUT_OF_RANGE` error to detect when
// they are done.
// HTTP Mapping: 400 Bad Request
// - UNIMPLEMENTED: The operation is not implemented or is not supported/enabled in this
// service.
// HTTP Mapping: 501 Not Implemented
// - INTERNAL: Internal errors.  This means that some invariants expected by the
// underlying system have been broken.  This error code is reserved
// for serious errors.
// HTTP Mapping: 500 Internal Server Error
// - UNAVAILABLE: The service is currently unavailable.  This is most likely a
// transient condition, which can be corrected by retrying with
// a backoff. Note that it is not always safe to retry
// non-idempotent operations.
// See the guidelines above for deciding between `FAILED_PRECONDITION`,
// `ABORTED`, and `UNAVAILABLE`.
// HTTP Mapping: 503 Service Unavailable
// - DATA_LOSS: Unrecoverable data loss or corruption.
// HTTP Mapping: 500 Internal Server Error.
// Ref: #/components/schemas/rpcCode
type RpcCode string

const (
	RpcCodeOK                 RpcCode = "OK"
	RpcCodeCANCELLED          RpcCode = "CANCELLED"
	RpcCodeUNKNOWN            RpcCode = "UNKNOWN"
	RpcCodeINVALIDARGUMENT    RpcCode = "INVALID_ARGUMENT"
	RpcCodeDEADLINEEXCEEDED   RpcCode = "DEADLINE_EXCEEDED"
	RpcCodeNOTFOUND           RpcCode = "NOT_FOUND"
	RpcCodeALREADYEXISTS      RpcCode = "ALREADY_EXISTS"
	RpcCodePERMISSIONDENIED   RpcCode = "PERMISSION_DENIED"
	RpcCodeUNAUTHENTICATED    RpcCode = "UNAUTHENTICATED"
	RpcCodeRESOURCEEXHAUSTED  RpcCode = "RESOURCE_EXHAUSTED"
	RpcCodeFAILEDPRECONDITION RpcCode = "FAILED_PRECONDITION"
	RpcCodeABORTED            RpcCode = "ABORTED"
	RpcCodeOUTOFRANGE         RpcCode = "OUT_OF_RANGE"
	RpcCodeUNIMPLEMENTED      RpcCode = "UNIMPLEMENTED"
	RpcCodeINTERNAL           RpcCode = "INTERNAL"
	RpcCodeUNAVAILABLE        RpcCode = "UNAVAILABLE"
	RpcCodeDATALOSS           RpcCode = "DATA_LOSS"
)

// AllValues returns all RpcCode values.
func (RpcCode) AllValues() []RpcCode {
	return []RpcCode{
		RpcCodeOK,
		RpcCodeCANCELLED,
		RpcCodeUNKNOWN,
		RpcCodeINVALIDARGUMENT,
		RpcCodeDEADLINEEXCEEDED,
		RpcCodeNOTFOUND,
		RpcCodeALREADYEXISTS,
		RpcCodePERMISSIONDENIED,
		RpcCodeUNAUTHENTICATED,
		RpcCodeRESOURCEEXHAUSTED,
		RpcCodeFAILEDPRECONDITION,
		RpcCodeABORTED,
		RpcCodeOUTOFRANGE,
		RpcCodeUNIMPLEMENTED,
		RpcCodeINTERNAL,
		RpcCodeUNAVAILABLE,
		RpcCodeDATALOSS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RpcCode) MarshalText() ([]byte, error) {
	switch s {
	case RpcCodeOK:
		return []byte(s), nil
	case RpcCodeCANCELLED:
		return []byte(s), nil
	case RpcCodeUNKNOWN:
		return []byte(s), nil
	case RpcCodeINVALIDARGUMENT:
		return []byte(s), nil
	case RpcCodeDEADLINEEXCEEDED:
		return []byte(s), nil
	case RpcCodeNOTFOUND:
		return []byte(s), nil
	case RpcCodeALREADYEXISTS:
		return []byte(s), nil
	case RpcCodePERMISSIONDENIED:
		return []byte(s), nil
	case RpcCodeUNAUTHENTICATED:
		return []byte(s), nil
	case RpcCodeRESOURCEEXHAUSTED:
		return []byte(s), nil
	case RpcCodeFAILEDPRECONDITION:
		return []byte(s), nil
	case RpcCodeABORTED:
		return []byte(s), nil
	case RpcCodeOUTOFRANGE:
		return []byte(s), nil
	case RpcCodeUNIMPLEMENTED:
		return []byte(s), nil
	case RpcCodeINTERNAL:
		return []byte(s), nil
	case RpcCodeUNAVAILABLE:
		return []byte(s), nil
	case RpcCodeDATALOSS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RpcCode) UnmarshalText(data []byte) error {
	switch RpcCode(data) {
	case RpcCodeOK:
		*s = RpcCodeOK
		return nil
	case RpcCodeCANCELLED:
		*s = RpcCodeCANCELLED
		return nil
	case RpcCodeUNKNOWN:
		*s = RpcCodeUNKNOWN
		return nil
	case RpcCodeINVALIDARGUMENT:
		*s = RpcCodeINVALIDARGUMENT
		return nil
	case RpcCodeDEADLINEEXCEEDED:
		*s = RpcCodeDEADLINEEXCEEDED
		return nil
	case RpcCodeNOTFOUND:
		*s = RpcCodeNOTFOUND
		return nil
	case RpcCodeALREADYEXISTS:
		*s = RpcCodeALREADYEXISTS
		return nil
	case RpcCodePERMISSIONDENIED:
		*s = RpcCodePERMISSIONDENIED
		return nil
	case RpcCodeUNAUTHENTICATED:
		*s = RpcCodeUNAUTHENTICATED
		return nil
	case RpcCodeRESOURCEEXHAUSTED:
		*s = RpcCodeRESOURCEEXHAUSTED
		return nil
	case RpcCodeFAILEDPRECONDITION:
		*s = RpcCodeFAILEDPRECONDITION
		return nil
	case RpcCodeABORTED:
		*s = RpcCodeABORTED
		return nil
	case RpcCodeOUTOFRANGE:
		*s = RpcCodeOUTOFRANGE
		return nil
	case RpcCodeUNIMPLEMENTED:
		*s = RpcCodeUNIMPLEMENTED
		return nil
	case RpcCodeINTERNAL:
		*s = RpcCodeINTERNAL
		return nil
	case RpcCodeUNAVAILABLE:
		*s = RpcCodeUNAVAILABLE
		return nil
	case RpcCodeDATALOSS:
		*s = RpcCodeDATALOSS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The response message containing the health status of the service.
// Ref: #/components/schemas/v1CheckResponse
type V1CheckResponse struct {
	Status CheckResponseServingStatus `json:"status"`
}

// GetStatus returns the value of Status.
func (s *V1CheckResponse) GetStatus() CheckResponseServingStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *V1CheckResponse) SetStatus(val CheckResponseServingStatus) {
	s.Status = val
}

// Ref: #/components/schemas/v1ExampleServiceQueryResponse
type V1ExampleServiceQueryResponse struct {
	Status OptProtov1Status `json:"status"`
}

// GetStatus returns the value of Status.
func (s *V1ExampleServiceQueryResponse) GetStatus() OptProtov1Status {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *V1ExampleServiceQueryResponse) SetStatus(val OptProtov1Status) {
	s.Status = val
}
