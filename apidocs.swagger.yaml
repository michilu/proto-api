swagger: "2.0"
info:
  title: An example of generating swagger via gRPC ecosystem.
  version: "1.0"
  contact:
    url: https://github.com/michilu/proto-api
    email: none@example.com
  license:
    name: Apache-2.0
    url: https://github.com/michilu/proto-api/blob/master/LICENSE
tags:
  - name: Health
  - name: ExampleService
schemes:
  - https
  - wss
consumes:
  - application/json
produces:
  - application/json
paths:
  /healthCheck:
    get:
      operationId: Health_Check
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1HealthCheckResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: service
          in: query
          required: false
          type: string
      tags:
        - Health
  /healthWatch:
    get:
      operationId: Health_Watch
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/v1HealthCheckResponse'
              error:
                $ref: '#/definitions/rpcStatus'
            title: Stream result of v1HealthCheckResponse
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: service
          in: query
          required: false
          type: string
      tags:
        - Health
  /v1/example/{id}:
    post:
      operationId: ExampleService_Query
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ExampleServiceQueryResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uuid
        - name: body
          in: body
          required: true
          schema:
            type: object
      tags:
        - ExampleService
      security:
        - ApiKeyAuth: []
          OAuth2:
            - read
            - write
definitions:
  HealthCheckResponseServingStatus:
    type: string
    enum:
      - UNKNOWN
      - SERVING
      - NOT_SERVING
      - SERVICE_UNKNOWN
    default: UNKNOWN
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  protov1Response:
    type: object
    properties:
      code:
        $ref: '#/definitions/rpcCode'
      message:
        type: string
  rpcCode:
    type: string
    enum:
      - OK
      - CANCELLED
      - UNKNOWN
      - INVALID_ARGUMENT
      - DEADLINE_EXCEEDED
      - NOT_FOUND
      - ALREADY_EXISTS
      - PERMISSION_DENIED
      - UNAUTHENTICATED
      - RESOURCE_EXHAUSTED
      - FAILED_PRECONDITION
      - ABORTED
      - OUT_OF_RANGE
      - UNIMPLEMENTED
      - INTERNAL
      - UNAVAILABLE
      - DATA_LOSS
    default: OK
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  v1ExampleServiceQueryResponse:
    type: object
    properties:
      value:
        $ref: '#/definitions/protov1Response'
  v1HealthCheckResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/HealthCheckResponseServingStatus'
securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    name: X-API-Key
    in: header
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://example.com/oauth/authorize
    tokenUrl: https://example.com/oauth/token
    scopes:
      admin: Grants read and write access to administrative information
      read: Grants read access
      write: Grants write access
security:
  - ApiKeyAuth: []
    OAuth2:
      - read
      - write
